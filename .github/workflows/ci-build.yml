name: Build and Test

on:
  pull_request:      
  workflow_dispatch:

env:
  DOTNET_NOLOGO: true                     # Disable the .NET logo in the console output
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true # Disable the .NET first time experience to skip caching NuGet packages and speed up the build
  DOTNET_CLI_TELEMETRY_OPTOUT: true 
  NUGET_AUTH_TOKEN: ${{secrets.PUBLISH_TO_NUGET_ORG}}     # <-- This is the token for the GitHub account you want to use.

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: pwsh
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

      - name: Check out repository code
        uses: actions/checkout@v4
      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."

      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}                

      - name: Restore Dotnet Tools
        run: |
          dotnet tool restore
          dotnet cleanup -y
        
      - name: Build TimeWarp.State.Analyzer
        run: |
          cd ${{ github.workspace }}/Source/TimeWarp.State.Analyzer/
          dotnet build --configuration Debug
          
      - name: Build TimeWarp.State.SourceGenerator
        run: |
          cd ${{ github.workspace }}/Source/TimeWarp.State.SourceGenerator/
          dotnet build --configuration Debug          

      - name: Build and Pack TimeWarp.State
        run: |
          cd ${{ github.workspace }}/Source/TimeWarp.State/
          dotnet build --configuration Debug
          dotnet pack --configuration Debug

      - name: Build and Pack TimeWarp.State.Plus
        run: |
          cd ${{ github.workspace }}/Source/TimeWarp.State.Plus/
          dotnet build --configuration Debug
          dotnet pack --configuration Debug          

#      - name: Client.Integration.Tests
#        run: |
#          cd Tests/Client.Integration.Tests/
#          dotnet restore
#          dotnet fixie --configuration Debug
#
#      - name: Server.Integration.Tests
#        run: |
#          cd Tests/Server.Integration.Tests/
#          dotnet restore
#          dotnet fixie --configuration Debug

      - name: TimeWarp.State.Analyzer.Tests
        run: |
            cd ${{ github.workspace }}/Tests/TimeWarp.State.Analyzer.Tests/
            dotnet restore
            dotnet fixie --configuration Debug
          
      - name: TimeWarp.State.Tests
        run: |
          cd ${{ github.workspace }}/Tests/TimeWarp.State.Tests/
          dotnet restore
          dotnet fixie --configuration Debug

      # End to End Tests
      - name: Test.App.EndToEnd.Tests
        run: |
          cd ${{ github.workspace }}/Tests/Test.App.EndToEnd.Tests/
          dotnet build

      - name: Ensure browsers are installed
        run: ${{ github.workspace }}/Tests/Test.App.EndToEnd.Tests/bin/Debug/net8.0/playwright.ps1 install --with-deps
        
      - name: Run End-to-End Tests against all settings
        run: ./RunE2ETests.ps1
        working-directory: ${{ github.workspace }}
        
#      - name: list files in the repository
#        run: |
#          ls ${{ github.workspace }}/Tests/Test.App.EndToEnd.Tests/Output
#          
#      - name: Generate Code Coverage Summary Report
#        id: coverage-summary
#        uses: irongut/CodeCoverageSummary@v1.3.0
#        with:
#          filename: ${{ github.workspace }}/Tests/Test.App.EndToEnd.Tests/Output/Cobertura.xml
#          badge: true
#          format: markdown
#          output: both
#    
#      - name: Add Coverage PR Comment
#        if: github.event_name == 'pull_request'
#        uses: marocchino/sticky-pull-request-comment@v2
#        with:
#          recreate: true
#          message: |
#            ## Code Coverage Summary
#            ${{ steps.coverage-summary.outputs.report }}
#    
#      - name: Update Actions Summary
#        run: |
#          echo "## Code Coverage Summary" >> $GITHUB_STEP_SUMMARY
#          echo '${{ steps.coverage-summary.outputs.report }}' >> $GITHUB_STEP_SUMMARY
#          
#      - name: Publish Code Coverage Results
#        uses: actions/upload-artifact@v4
#        with:
#          name: coverage-report
#          path: ${{ github.workspace }}/Tests/Test.App.EndToEnd.Tests/Output/coverageReport.html          

      - run: echo "üçè This job's status is ${{ job.status }}."
