name: Build and Test

on:
  pull_request:      
  workflow_dispatch:

env:
  DOTNET_NOLOGO: true                     # Disable the .NET logo in the console output
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true # Disable the .NET first time experience to skip caching NuGet packages and speed up the build
  DOTNET_CLI_TELEMETRY_OPTOUT: true 
  NUGET_AUTH_TOKEN: ${{secrets.PUBLISH_TO_NUGET_ORG}}     # <-- This is the token for the GitHub account you want to use.

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: pwsh
    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

      - name: Check out repository code
        uses: actions/checkout@v3
      - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."

      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}                

      - name: Restore Dotnet Tools
        run: dotnet tool restore

      - name: Build BlazorStateAnalyzer
        run: |
          cd ${{ github.workspace }}/Source/BlazorStateAnalyzer/
          dotnet clean --configuration Debug
          dotnet build --configuration Debug

      - name: Build and Pack BlazorState
        run: |
          cd ${{ github.workspace }}/Source/BlazorState/
          dotnet clean --configuration Debug
          dotnet build --configuration Debug
          dotnet pack --configuration Debug

      - name: Build and Pack TimeWarp.State.Plus
        run: |
          cd ${{ github.workspace }}/Source/TimeWarp.State.Plus/
          dotnet clean --configuration Debug
          dotnet build --configuration Debug
          dotnet pack --configuration Debug          

#      - name: Client.Integration.Tests
#        run: |
#          cd Tests/Client.Integration.Tests/
#          dotnet restore
#          dotnet fixie --configuration Debug
#
#      - name: Server.Integration.Tests
#        run: |
#          cd Tests/Server.Integration.Tests/
#          dotnet restore
#          dotnet fixie --configuration Debug

      - name: BlazorStateAnalyzer.Tests
        run: |
            cd ${{ github.workspace }}/Tests/BlazorStateAnalyzer.Tests/
            dotnet restore
            dotnet fixie --configuration Debug

      # End to End Tests
      - name: Test.App.EndToEnd.Tests
        run: |
          cd ${{ github.workspace }}/Tests/Test.App.EndToEnd.Tests/
          dotnet build

      - name: Ensure browsers are installed
        run: ${{ github.workspace }}/Tests/Test.App.EndToEnd.Tests/bin/Debug/net8.0/playwright.ps1 install --with-deps
        
      - name: Run End-to-End Tests against all settings
        run: ./RunE2ETests.ps1
        working-directory: ${{ github.workspace }}    
        
      - name: Publish Code Coverage Results
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: ${{ github.workspace }}/Tests/Test.App.EndToEnd.Tests/Output/coverageReport.html

      - run: echo "🍏 This job's status is ${{ job.status }}."
