<Project>
  <!-- Set common properties regarding assembly information and nuget packages -->
  <PropertyGroup>
    <Authors>Steven T. Cramer</Authors>
    <Product>Blazor State</Product>
    <PackageVersion>11.0.0-beta.6+8.0.101</PackageVersion>
    <PackageProjectUrl>https://timewarpengineering.github.io/blazor-state/</PackageProjectUrl>
    <PackageTags>TimeWarp-State; TimeWarpState; BlazorState; Blazor; State; Blazor-State; MediatR; Mediator; Pipeline; Redux; Flux</PackageTags>
    <PackageIcon>Logo.png</PackageIcon>
    <RepositoryUrl>https://github.com/TimeWarpEngineering/blazor-state.git</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <PackageLicenseExpression>Unlicense</PackageLicenseExpression>
    <PackageReleaseNotes>https://timewarpengineering.github.io/blazor-state/Overview.html</PackageReleaseNotes>
    <PackageReadmeFile>README.md</PackageReadmeFile>
  </PropertyGroup>
  
  <!-- Complier Generated files https://andrewlock.net/creating-a-source-generator-part-6-saving-source-generator-output-in-source-control/ -->

<!--  <PropertyGroup>-->
<!--    &lt;!&ndash; Persist the source generator (and other) files to disk &ndash;&gt;-->
<!--    <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>-->
<!--    &lt;!&ndash; ðŸ‘‡ The "base" path for the source generators &ndash;&gt;-->
<!--    <GeneratedFolder>D:\Temp\Generated</GeneratedFolder>-->
<!--    &lt;!&ndash; ðŸ‘‡ Write the output for each target framework to a different sub-folder &ndash;&gt;-->
<!--    <CompilerGeneratedFilesOutputPath>$(GeneratedFolder)\$(TargetFramework)</CompilerGeneratedFilesOutputPath>-->
<!--  </PropertyGroup>-->

<!--  <ItemGroup>-->
<!--    &lt;!&ndash; ðŸ‘‡ Exclude everything in the base folder &ndash;&gt;-->
<!--    <Compile Remove="$(GeneratedFolder)/**/*.cs" />-->
<!--  </ItemGroup>-->

  <!-- Deterministic Builds  https://devblogs.microsoft.com/dotnet/producing-packages-with-source-link/#deterministic-builds -->
  <PropertyGroup Condition="'$(TF_BUILD)' == 'true'">
    <ContinuousIntegrationBuild>true</ContinuousIntegrationBuild>
  </PropertyGroup>
  <PropertyGroup Condition="'$(GITHUB_ACTIONS)' == 'true'">
    <ContinuousIntegrationBuild>true</ContinuousIntegrationBuild>
  </PropertyGroup>

  <!-- Common compile parameters -->
  <PropertyGroup>
    <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>
    <ImplicitUsings>enable</ImplicitUsings>
    <LangVersion>latest</LangVersion>
    <ManagePackageVersionsCentrally>true</ManagePackageVersionsCentrally>
    <NoWarn>CS7035;NU1503;1503</NoWarn>
    <Nullable>disable</Nullable>
    <TargetFramework>net8.0</TargetFramework>
    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
  </PropertyGroup>
  
  <!--This is to add the SHA for the commit to your assembly InformationalVersion -->
  <Choose>
    <When Condition="'$(OfficialBuild)' != 'true'">
      <!-- On non-official builds we don't burn in a git sha. In large part because it
           hurts our determinism efforts as binaries which should be the same between
           builds will not (due to developers building against different HEAD
           values -->
      <PropertyGroup>
        <GitHeadSha>&lt;developer build&gt;</GitHeadSha>
      </PropertyGroup>
    </When>
    <When Condition="'$(BUILD_SOURCEVERSION)' != ''">
      <PropertyGroup>
        <GitHeadSha>$(BUILD_SOURCEVERSION)</GitHeadSha>
      </PropertyGroup>
    </When>
    <When Condition="'$(BUILD_SOURCEVERSION)' == '' AND '$(GIT_COMMIT)' != ''">
      <PropertyGroup>
        <GitHeadSha>$(GIT_COMMIT)</GitHeadSha>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <GitHeadSha>Not found</GitHeadSha>
        <DotGitDir>$([System.IO.Path]::GetFullPath('$(MSBuildThisFileDirectory).git'))</DotGitDir>
        <HeadFileContent Condition="Exists('$(DotGitDir)/HEAD')">$([System.IO.File]::ReadAllText('$(DotGitDir)/HEAD').Trim())</HeadFileContent>
        <RefPath Condition="$(HeadFileContent.StartsWith('ref: '))">$(DotGitDir)/$(HeadFileContent.Substring(5))</RefPath>
        <GitHeadSha Condition="'$(RefPath)' != '' AND Exists('$(RefPath)')">$([System.IO.File]::ReadAllText('$(RefPath)').Trim())</GitHeadSha>
        <GitHeadSha Condition="'$(HeadFileContent)' != '' AND '$(RefPath)' == ''">$(HeadFileContent)</GitHeadSha>
      </PropertyGroup>
    </Otherwise>
  </Choose>
</Project>
