@namespace Test.App.Client.Pages
@page "/customInput"
@inherits BaseComponent
@using System.Drawing

<h1>Custom Input</h1>
@RenderModeDisplay
<br />
<div>
  Shows how to create a custom input component that uses a color picker.
  Forms need to be bound to mutable properties. Thus should NOT be bound directly to State.
  Instead, they should be bound to a property on an Action that will be dispatched to update the state.
  The CustomInput component has access to States and thus can adjust display based on the state and will subscribe to state changes.
  Although the Input component will not be bound to state as it is immutable.
  This CustomInput shows that it can display CounterState.Count and dispatch an action in the custom input.
  While being bound to a property on the Person model (would likely be some Action).
</div>
<hr />
<EditForm FormName="Person" Model=@CurrentPerson OnValidSubmit=@HandleValidSubmit>
  <CustomInput @bind-Value=CurrentPerson.Amount ValidationFor=@(() => CurrentPerson.Amount) Label="Custom Input"/>
  <br/>
  <InputColor @bind-Value=CurrentPerson.FavoriteColor />
</EditForm>

Favorite color is @CurrentPerson.FavoriteColor
<div style="width:100px;height:100px;background-color:@ColorAsHex"></div>

@code {
  readonly Person CurrentPerson = new()
  {
    Amount = 10,
    FavoriteColor = Color.Green
  };

  string ColorAsHex => InputColor.ColorToString(CurrentPerson.FavoriteColor);

  class Person
  {
    public Color FavoriteColor { get; set; }
    public int Amount { get; set; }
  }
  
  /// <summary>
  /// The title for the page.
  /// </summary>
  public const string Title = "Custom Input Page";
  
  /// <summary>
  /// The route for the page.
  /// </summary>
  public const string Route = "/custominput";
  
  private static void HandleValidSubmit() => Console.WriteLine("Valid Submit");
}
